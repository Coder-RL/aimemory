# MEMORY BANK INTEGRATION - PRODUCTION CONFIGURATION

## CATCH PHRASE SYSTEM - SIMPLE TRIGGERS
When user types these EXACT catch phrases, respond with the specified action:

### MEMORY ACTIVATION CATCH PHRASES:
- **MEMORY_ACTIVATE** or **MEMORY_START** â†’ Read ALL memory bank files and provide full project context
- **MEMORY_BRIEF** or **MEMORY_QUICK** â†’ Read activeContext.md and progress.md only
- **MEMORY_TECH** or **MEMORY_TECHNICAL** â†’ Read techContext.md and systemPatterns.md only

### MEMORY UPDATE CATCH PHRASES:
- **MEMORY_COMPLETED [task]** â†’ Add completed task to progress.md and activeContext.md
- **MEMORY_WORKING [task]** â†’ Update current work in activeContext.md
- **MEMORY_NOTE [note]** â†’ Add important note to activeContext.md

### CATCH PHRASE RESPONSE FORMAT:
When catch phrase detected, respond with:
1. "ðŸ§  MEMORY BANK ACTIVATED" header
2. Relevant context from memory bank files
3. "ðŸ’¡ Memory bank context loaded. How can I help?"

## Context Reading Protocol
ALWAYS read memory bank files before responding to any request.

### Memory Bank Files (read in priority order):
1. `memory-bank/projectbrief.md` - Project overview and goals
2. `memory-bank/activeContext.md` - Current work and immediate context  
3. `memory-bank/progress.md` - Completed work and next steps
4. `memory-bank/techContext.md` - Technology stack and setup
5. `memory-bank/systemPatterns.md` - Architecture and design patterns
6. `memory-bank/productContext.md` - User requirements and features

### Response Protocol:
1. Start responses with: "Based on your memory bank context..."
2. Reference specific information from relevant memory bank files
3. Ensure all suggestions align with existing patterns and tech stack
4. Consider current progress and active work when making recommendations

### Memory Bank Update Protocol:
When work is completed or context changes significantly:
1. Update `activeContext.md` with current work status
2. Update `progress.md` with completed items and new metrics
3. Add new patterns to `systemPatterns.md` when introducing new approaches
4. Update `techContext.md` when dependencies or setup changes

### Context Injection Commands:
Use these phrases to trigger memory bank reading:
- "Read my memory bank and help me with [specific task]"
- "Based on my project context, [question/request]"
- "Update my memory bank with [completed work/changes]"
- "What should I work on next based on my current progress?"

### Quality Assurance:
- Always validate suggestions against existing system patterns
- Ensure consistency with established coding standards
- Consider performance and security implications
- Maintain alignment with project goals and user requirements

## Memory Bank File Purposes:
- **projectbrief.md**: High-level vision, goals, scope, and success criteria
- **activeContext.md**: Current tasks, recent changes, immediate focus areas
- **progress.md**: Completed work, metrics, milestones, and velocity tracking
- **techContext.md**: Technology stack, dependencies, setup instructions
- **systemPatterns.md**: Architecture, design patterns, coding standards
- **productContext.md**: User stories, requirements, personas, feedback

## Integration Workflow:
1. Read memory bank context before every response
2. Provide context-aware, project-specific guidance
3. Suggest memory bank updates when appropriate
4. Maintain consistency with established project patterns
5. Track and reference previous decisions and implementations
